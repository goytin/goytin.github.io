function ghpaAuthMessage(f){(authMessageElement=document.getElementById("ghpaAuthMessage"))&&"none"!=authMessageElement.style.display?authMessageElement.innerHTML=htmlEncode(f)+"<small> ["+(new Date).localBigEndianFull()+"]</small>":window.alert(f)}function ghpaClearSSO(){sessionStorage.removeItem("ghpaUserID");sessionStorage.removeItem("ghpaCreds");sessionStorage.removeItem("ghpaCredsKey");return!0}
async function ghpaLoadPage(){const f=sessionStorage.getItem("ghpaCreds"),h=sessionStorage.getItem("ghpaCredsKey");ghpaSSOFlag&&f&&ghpaRetrieve(!0,f,h)||(document.getElementById("ghpaPrompt").style.display="","-"!=ghpaLoginFormFile&&await fetch(ghpaLoginFormFile).then(function(c){if(200!=c.status)throw Error(`${c.status} HTTP response`);return c.text()}).then(function(c){document.getElementById("ghpaLoginForm").innerHTML=c}).catch(function(c){ghpaAuthMesssage("ghpaLoadPage() error attempting to load login form: "+
c.message);console.error(c)}))}
async function ghpaRetrieve(f,h,c){let k,l,n=0;if(f&&h){if(c){let e=new Uint8Array(32);for(let b=0,g=e.length;b<g;b++)e[b]=parseInt(c.slice(2*b,2*b+2),16);let a=new Uint8Array(12);for(let b=0,g=a.length;b<g;b++)a[b]=parseInt(c.slice(2*b+64,2*b+66),16);await window.crypto.subtle.importKey("raw",e,"AES-GCM",!0,["encrypt","decrypt"]).then(async function(b){let g=new Uint8Array(h.length/2);for(let d=0,m=g.length;d<m;d++)g[d]=parseInt(h.slice(2*d,2*d+2),16);h=(new TextDecoder).decode(await window.crypto.subtle.decrypt({name:"AES-GCM",iv:a},
b,g))}).catch(function(b){window.alert("ghpaRetrieve() error attempting to decrypt GitHub token: "+b.message);console.error(b)})}k=h;l="mylogin"}else l="mylogin",k=h.querySelector("#ghpaPassword").value;if(f&&!l)ghpaAuthMessage("SSO GitHub token couldn't be parsed. Try logging out and logging in again.");else if(l.match(/^[a-z\d](?:[a-z\d]|-(?=[a-z\d]))+$/i)){ghpaFilename?"/"!=ghpaFilename.slice(0,1)&&(ghpaFilename=window.location.pathname.replace(/\/[^\/]*$/,"/")+ghpaFilename):ghpaFilename=window.location.pathname;
"/"==ghpaFilename.slice(ghpaFilename.length-1)&&(ghpaFilename+=ghpaDefaultHTMLfile);ghpaFilename=encodeURI(ghpaFilename);for(f=/(\/\/)|(\/\.\/)|(\/[^\/]+(?<!(\.)|(\.\.))\/\.\.\/)/g;-1!=ghpaFilename.search(f);)ghpaFilename=ghpaFilename.replace(f,"/");f=new Request(`https://api.github.com/repos/${ghpaOrg}/${ghpaRepo}/contents${ghpaFilename}?ref=${ghpaBranch}`,{method:"GET",credentials:"omit",headers:{Accept:"application/json",Authorization:`Bearer ${k}`}});await fetch(f).then(async function(e){!ghpaSSOFlag||
200!=e.status&&404!=e.status||await window.crypto.subtle.generateKey({name:"AES-GCM",length:256},!0,["encrypt","decrypt"]).then(async function(a){const b=new Uint8Array(await window.crypto.subtle.exportKey("raw",a)),g=await window.crypto.getRandomValues(new Uint8Array(12));c="";for(let d=0,m=b.length;d<m;d++)c+=b[d].toString(16).padStart(2,"0");for(let d=0,m=g.length;d<m;d++)c+=g[d].toString(16).padStart(2,"0");a=await window.crypto.subtle.encrypt({name:"AES-GCM",iv:g},a,(new TextEncoder).encode(k));
a=new Uint8Array(a);k="";for(let d=0,m=a.length;d<m;d++)k+=a[d].toString(16).padStart(2,"0");sessionStorage.setItem("ghpaCredsKey",c);sessionStorage.setItem("ghpaCreds",k);sessionStorage.setItem("ghpaUserID",l);if(sessionStorage.getItem("ghpaCreds")!=k||sessionStorage.getItem("ghpaCredsKey")!=c||sessionStorage.getItem("ghpaUserID")!=l)sessionStorage.removeItem("ghpaCreds"),sessionStorage.removeItem("ghpaCredsKey"),sessionStorage.removeItem("ghpaUserID")}).catch(function(a){window.alert("ghpaRetrieve() error attempting to encrypt GitHub token: "+
a.message);console.error(a)});!ghpaAuthOnlyFlag||200!=e.status&&404!=e.status?200!=e.status||ghpaAuthOnlyFlag?200!=e.status&&(ghpaAuthOnlyFlag&&404!=e.status?ghpaAuthMessage(`Failed to authenticate to ${ghpaOrg} : ${ghpaRepo} : ${ghpaBranch} (status: ${e.status}).`):ghpaAuthMessage(`Failed to load ${ghpaOrg} : ${ghpaRepo} : ${ghpaBranch} : ${ghpaFilename} (status: ${e.status}).`)):e.json().then(function(a){a="base64"===a.encoding?atob(a.content):a.content;if(ghpaOnlyGetBodyFlag){const b=a.indexOf("<body"),
g=a.indexOf(">",b)+1,d=a.indexOf("</body>",g);document.body.innerHTML=-1==b||-1==d?"":a.slice(g,d)}else document.body.innerHTML=a}):(ghpaAuthMessage(`Confirmed GitHub authentication as ${l}.`+(ghpaSSOFlag?" Credentials saved for SSO.":"")),document.getElementById("ghpaLoginForm").style.display="none");n=e.status}).catch(function(e){ghpaAuthMessage("ghpaRetrieve() error attempting to retrieve private content: "+e.message);console.error(e)})}else ghpaAuthMessage("GitHub usernames may only contain alphanumeric charcters or single hypens, cannot begin or end with a hyphen, and must not be empty.");
return 200==n}function htmlEncode(f){let h="";for(let c=f.length-1;0<=c;c--)h="&#"+f.charCodeAt(c)+h;return h}
Date.prototype.localBigEndianFull=function(){return this.getFullYear()+"-"+(10>this.getMonth()+1?"0":"")+(this.getMonth()+1)+"-"+(10>this.getDate()?"0":"")+this.getDate()+" "+(10>this.getHours()?"0":"")+this.getHours()+":"+(10>this.getMinutes()?"0":"")+this.getMinutes()+":"+(10>this.getSeconds()?"0":"")+this.getSeconds()+" UTC"+(0<=this.getTimezoneOffset()?"+":"")+(10>Math.floor(this.getTimezoneOffset()/60)?"0":"")+Math.floor(this.getTimezoneOffset()/60)+":"+(10>this.getTimezoneOffset()%60?"0":"")+
this.getTimezoneOffset()%60};let ghpaOrg="goytin",ghpaRepo="ghpa-test",ghpaBranch="main",ghpaDefaultHTMLfile="index.html",ghpaLoginFormFile="/loginform.html",ghpaFilename="",ghpaUserID=sessionStorage.getItem("ghpaUserID");const ghpaTokensOnlyFlag=!0;let ghpaSSOFlag=!0,ghpaAuthOnlyFlag=!1,ghpaOnlyGetBodyFlag=!1;
